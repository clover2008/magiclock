#!/usr/bin/python2

import dbus
import gobject
from dbus.mainloop.glib import DBusGMainLoop
from os import system,environ,getpid,kill,close
from subprocess import Popen
from sys import exit,stdout,stdin,stderr,argv
from hashlib import sha256

curr_device=''
SerialOfLock=''
LockMode=0

def daemonize():
  from os import fork, chdir, setsid, umask
  try:
    pid = fork()
    if pid > 0:
      exit(0)
  except OSError, e:
    exit(1)

  chdir("/")
  setsid()
  umask(0)

  try:
    pid = fork()
    if pid > 0:
      exit(0)
  except OSError, e:
    exit(1)

def dev_added(device):
    global curr_device
    s=sha256()
#    print "Current Device: "+str(curr_device)
#   print "Added Device: "+str(device)
    dev_obj=bus.get_object('org.freedesktop.UDisks',device)
    dev_iface=dbus.Interface(dev_obj,dbus.PROPERTIES_IFACE)
    s.update(str(dev_iface.Get('org.freedesktop.UDisks.Device','DriveSerial')))
    serial=str(s.digest())
#   if serial == 'ARBITTESTINGSERIAL':
    if serial == SerialOfLock :
#        print "MagicPot connected with serial:"+str(SerialOfLock)
        try:
            Popen(['gnome-screensaver-command','-d'])
        except OSError:
            pass
        try:
            Popen(['xscreensaver-command','-d'])
        except OSError:
            pass
        try:
            Popen(['qdbus','org.kde.screenlocker','/MainApplication','quit'])
        except OSError:
            pass
        try:
            Popen(['qdbus','org.kde.plasma-overlay','/MainApplication','quit'])
        except OSError:
            pass
        try:
            Popen(['qdbus','org.freedesktop.ScreenSaver','/ScreenSaver','SetActive','false'])
        except OSError:
            pass
        curr_device=device

def dev_removed(device):
    global curr_device
#    print "Current Device: "+str(curr_device)
#    print "Removed Device: "+str(device)
    if (curr_device != '') and (curr_device == device):
#        print "MagicPot bhaag gaya: "+str(SerialOfLock)
        try:
            Popen(['gnome-screensaver-command','-l'])
        except OSError:
            pass
        try:
            Popen(['xscreensaver-command','-l'])
        except OSError:
            pass
        try:
            Popen(['qdbus','org.freedesktop.ScreenSaver','/ScreenSaver','Lock'])
        except OSError:
            pass
        try:
            Popen(['qdbus org.freedesktop.ScreenSaver','/ScreenSaver','SetActive','true'])
        except OSError:
            pass
        curr_device=''

DBusGMainLoop(set_as_default=True)
bus=dbus.SystemBus()

bus_obj=bus.get_object('org.freedesktop.UDisks','/org/freedesktop/UDisks')
bus_iface=dbus.Interface(bus_obj,"org.freedesktop.UDisks")

def readConfig():
    global SerialOfLock
    global pid
    global LockMode
    configString={'serial':'','pid':0,'lockmode':0}
    try:
        config=open(environ['HOME']+'/.config/magiclock')
        import ast
        configString.update(ast.literal_eval(config.read()))
    except:
        print "No config file found. Please run magiclock-admin."
        print "No wait, lemme do that for you :P"
        Popen(['magiclock-admin'])
        exit(1)
    SerialOfLock=configString['serial']
    pid=configString['pid']
    LockMode=configString['lockmode']

def writeConfig():
    configString="{'serial':'%s','pid':%d,'lockmode':%d}" % (SerialOfLock,pid,LockMode)
    try:
        config=open(environ['HOME']+'/.config/magiclock','w')
        config.write(configString)
    except:
        print "Could not write pid to config file. Killing might be problematic in the future"
   
if __name__=="__main__":
    daemonize()
    readConfig()

    if len(argv) > 1 and ('-k' in argv[0:]):
        if pid == 0:
            print "No process to kill!"
            exit() 
        configString={'serial':'','pid':0,'lockmode':0}
        config=open(environ['HOME']+'/.config/magiclock')
        import ast
        configString.update(ast.literal_eval(config.read()))
        config.close()
        configString="{'serial':'%s','lockmode':%d}" % (configString['serial'],configString['lockmode'])
        config=open(environ['HOME']+'/.config/magiclock','w')
        config.write(configString)
        config.close()
        kill(pid,15)
        exit(0)
	
    loop=gobject.MainLoop()

    pid=getpid()
    writeConfig()
    bus_iface.connect_to_signal('DeviceAdded',dev_added)
    if LockMode == 0:
        bus_iface.connect_to_signal('DeviceRemoved',dev_removed)

    loop.run()
